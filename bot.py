import time
import datetime
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.executor import start_polling
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from db import global_init, Users, create_session
import MyParser
from MyParser import check_user, day_info, table
import json

TOKEN = '1605643472:AAGU6XrjOykQTe_N5PHKR3ulGHSOhOYp73Q'

close = InlineKeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
back = InlineKeyboardButton('‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu')
inline_btn_1 = InlineKeyboardButton('üë®‚Äçüéì –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
inline_btn_2 = InlineKeyboardButton('üìî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='for_2day')
inline_btn_3 = InlineKeyboardButton('üè´ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é', callback_data='week')
main_menu = InlineKeyboardMarkup(row_width=1).add(inline_btn_1, inline_btn_2, inline_btn_3, close)


def get_dayly(json_table):
    ans = ''
    if '–Ω–µ—Ç' == json_table:
        return '–î–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º'
    counter = 1
    for i in json_table["lessons"]:
        if i["homework"] == '' and i['marks'] == '':
            ans += f"{counter}. {i['lesson_time'].split('‚Äî')[0]} ‚Äî {i['lesson_name']}\n"
        elif i["homework"] == '':
            ans += f"{counter}. {i['lesson_time'].split('‚Äî')[0]} ‚Äî {i['lesson_name']}, –û—Ü–µ–Ω–∫–∏: {i['marks']}\n"
        elif i["marks"] == '':
            ans += f"{counter}. {i['lesson_time'].split('‚Äî')[0]} ‚Äî {i['lesson_name']}, –î–ó: {i['homework']}\n"
        else:
            ans += f"{counter}. {i['lesson_time'].split('‚Äî')[0]} ‚Äî {i['lesson_name']}, –î–ó: {i['homework']}, –û—Ü–µ–Ω–∫–∏: {i['marks']}\n"
        ans += '\n'
        counter += 1
    return ans


class Login(StatesGroup):
    login = State()
    passw = State()


bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.callback_query_handler(
    lambda callback_query: callback_query.data and callback_query.data.startswith('table_lesson'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    await  bot.answer_callback_query(callback_query_id=callback_query.id, show_alert=False,
                                     text=f"–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É üì≤")
    session = create_session()
    user = session.query(Users).filter(Users.tg_id == callback_query.message.chat.id).first()
    marks = table(user.login, user.password, user.cookie, '2')
    lessons = marks['lessons'][int(callback_query.data.split('_')[2])]
    lesson_name = lessons['lesson_name']
    marks = lessons['marks']
    if len(marks) == 0:
        answer = f'–£—Ä–æ–∫: {lesson_name}\n–û—Ü–µ–Ω–∫–∏: –û—Ü–µ–Ω–æ–∫ –Ω–µ—Ç! üôâ'
    else:
        if '.' in marks[-1]:
            all_marks = ', '.join(marks[:-1])
            middle = marks[-1]
            final = ''
        else:
            all_marks = ' '.join(marks[:-2])
            middle = marks[-2]
            final = f"–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {marks[-1]}"
        answer = f'–£—Ä–æ–∫: {lesson_name}\n–í—Å–µ –æ—Ü–µ–Ω–∫–∏: {all_marks}\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª: {middle}\n{final}'
    back = InlineKeyboardButton('‚óÄ –ù–∞–∑–∞–¥', callback_data='profile_table')
    inline_kb1 = InlineKeyboardMarkup(row_width=1).add(back, close)
    await bot.edit_message_text(answer,
                                callback_query.message.chat.id,
                                callback_query.message.message_id, reply_markup=inline_kb1)


@dp.callback_query_handler(lambda callback_query: callback_query.data and callback_query.data.startswith('profile_'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    session = create_session()
    user = session.query(Users).filter(Users.tg_id == callback_query.message.chat.id).first()
    if callback_query.data == 'profile_logout':
        await  bot.answer_callback_query(callback_query_id=callback_query.id, show_alert=False,
                                         text="–í—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ üë£")
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        session.delete(user)
        session.commit()
        await bot.send_message(callback_query.message.chat.id,
                               "–ü—Ä–∏–≤–µ—Ç! üëã\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n–í —Å–ª–µ–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–≤–µ–¥–∏—Ç–µ *—Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–Ω.*",
            parse_mode=ParseMode.MARKDOWN))
        await Login.login.set()
    elif callback_query.data == 'profile_table':
        await  bot.answer_callback_query(callback_query_id=callback_query.id, show_alert=False,
                                         text="–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ üìñ")
        inline_kb1 = InlineKeyboardMarkup(row_width=2)
        marks = table(user.login, user.password, user.cookie, '2')
        counter = 0
        last_button = None
        for i in marks['lessons']:
            inline_btn_1 = InlineKeyboardButton(f'{i["lesson_name"]}', callback_data=f'table_lesson_{counter}')
            if counter % 2 != 0:
                inline_kb1.row(last_button, inline_btn_1)
            counter += 1
            last_button = inline_btn_1
        back = InlineKeyboardButton('‚óÄ –ù–∞–∑–∞–¥', callback_data='profile')
        inline_kb1.row(back)
        inline_kb1.row(close)
        await bot.edit_message_text('–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ—Ü–µ–Ω–∫–∏ ‚¨áÔ∏è',
                                    callback_query.message.chat.id,
                                    callback_query.message.message_id, reply_markup=inline_kb1)


@dp.callback_query_handler(lambda callback_query: callback_query.data and callback_query.data.startswith('profile'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    await  bot.answer_callback_query(callback_query_id=callback_query.id, show_alert=False,
                                     text="–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å üë®‚Äçüéì")
    inline_btn_1 = InlineKeyboardButton('üë©‚Äçüè´ –¢–∞–±–µ–ª—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏', callback_data='profile_table')
    inline_btn_3 = types.InlineKeyboardButton(text='‚ÑπÔ∏è –ü–æ–º–æ—â—å', url="t.me/stripessssssssssssssssssssssssss")
    inline_btn_2 = InlineKeyboardButton('üìµ –í—ã–π—Ç–∏ ', callback_data='profile_logout')
    inline_kb1 = InlineKeyboardMarkup(row_width=1).add(inline_btn_1, inline_btn_3, inline_btn_2)
    inline_kb1.row(back, close)
    await bot.edit_message_text('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è',
                                callback_query.message.chat.id,
                                callback_query.message.message_id, reply_markup=inline_kb1)


@dp.callback_query_handler(lambda callback_query: callback_query.data and callback_query.data.startswith('week_'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    day = callback_query.data.split('_')[1]
    today = str(datetime.datetime.now().weekday())
    session = create_session()
    user = session.query(Users).filter(Users.tg_id == callback_query.message.chat.id).first()
    back = InlineKeyboardButton('‚óÄ –ù–∞–∑–∞–¥', callback_data='week')
    if day == today:
        now = datetime.datetime.now()
        s = f"{now.day}/{now.month}/{now.year}"
        inline_kb1 = InlineKeyboardMarkup(row_width=1).add(back, close)
        unix_day = int(time.mktime(datetime.datetime.strptime(s, "%d/%m/%Y").timetuple()))
        await  bot.answer_callback_query(callback_query_id=callback_query.id, show_alert=False,
                                         text="–ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üîç")
        await bot.edit_message_text(get_dayly(day_info(user.login, user.password, unix_day, user.cookie)),
                                    callback_query.message.chat.id,
                                    callback_query.message.message_id, reply_markup=inline_kb1)
    elif day > today:
        now = datetime.datetime.now()
        s = f"{now.day + abs(int(day) - int(today))}/{now.month}/{now.year}"
        inline_kb1 = InlineKeyboardMarkup(row_width=1).add(back, close)
        unix_day = int(time.mktime(datetime.datetime.strptime(s, "%d/%m/%Y").timetuple()))
        await  bot.answer_callback_query(callback_query_id=callback_query.id, show_alert=False,
                                         text="–ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –¥–µ–Ω—å üëÄ")
        await bot.edit_message_text(get_dayly(day_info(user.login, user.password, unix_day, user.cookie)),
                                    callback_query.message.chat.id,
                                    callback_query.message.message_id, reply_markup=inline_kb1)
    else:
        now = datetime.datetime.now()
        s = f"{now.day - abs(int(today) - int(day))}/{now.month}/{now.year}"
        inline_kb1 = InlineKeyboardMarkup(row_width=1).add(back, close)
        unix_day = int(time.mktime(datetime.datetime.strptime(s, "%d/%m/%Y").timetuple()))
        await  bot.answer_callback_query(callback_query_id=callback_query.id, show_alert=False,
                                         text="–ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –¥–µ–Ω—å üëÄ")
        await bot.edit_message_text(get_dayly(day_info(user.login, user.password, unix_day, user.cookie)),
                                    callback_query.message.chat.id,
                                    callback_query.message.message_id, reply_markup=inline_kb1)


@dp.callback_query_handler()
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    if callback_query.data == 'for_2day':
        session = create_session()
        user = session.query(Users).filter(Users.tg_id == callback_query.message.chat.id).first()
        now = datetime.datetime.now()
        s = f"{now.day}/{now.month}/{now.year}"
        inline_kb1 = InlineKeyboardMarkup(row_width=1).add(back, close)
        unix_day = int(time.mktime(datetime.datetime.strptime(s, "%d/%m/%Y").timetuple()))
        await  bot.answer_callback_query(callback_query_id=callback_query.id, show_alert=False,
                                         text="–ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üîç")
        await bot.edit_message_text(get_dayly(day_info(user.login, user.password, unix_day, user.cookie)),
                                    callback_query.message.chat.id,
                                    callback_query.message.message_id, reply_markup=inline_kb1)
    elif callback_query.data == 'week':
        await  bot.answer_callback_query(callback_query_id=callback_query.id, show_alert=False,
                                         text="–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ üìÜ")
        inline_btn_1 = InlineKeyboardButton('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='week_0')
        inline_btn_2 = InlineKeyboardButton('–í—Ç–æ—Ä–Ω–∏–∫', callback_data='week_1')
        inline_btn_3 = InlineKeyboardButton('–°—Ä–µ–¥–∞', callback_data='week_2')
        inline_btn_4 = InlineKeyboardButton('–ß–µ—Ç–≤–µ—Ä–≥', callback_data='week_3')
        inline_btn_5 = InlineKeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞', callback_data='week_4')
        inline_btn_6 = InlineKeyboardButton('–°—É–±–±–æ—Ç–∞', callback_data='week_5')
        inline_kb1 = InlineKeyboardMarkup(row_width=1).add(inline_btn_1, inline_btn_2, inline_btn_3, inline_btn_4,
                                                           inline_btn_5, inline_btn_6)
        inline_kb1.row(back, close)
        await bot.edit_message_text('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:',
                                    callback_query.message.chat.id,
                                    callback_query.message.message_id, reply_markup=inline_kb1)
    elif callback_query.data == 'menu':
        session = create_session()
        user = session.query(Users).filter(Users.tg_id == callback_query.message.chat.id).first()
        await  bot.answer_callback_query(callback_query_id=callback_query.id, show_alert=False,
                                         text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨Ö")
        await bot.edit_message_text(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.name}!",
                                    callback_query.message.chat.id, callback_query.message.message_id,
                                    reply_markup=main_menu)

    else:
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)


@dp.message_handler(commands=['start', 'help'], state=None)
async def process_start_command(message: types.Message):
    session = create_session()
    user = session.query(Users).filter(Users.tg_id == message.chat.id).first()
    if user != None:
        await message.reply(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.name} ‚úåÔ∏è", reply_markup=main_menu)
    else:
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n–í —Å–ª–µ–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–≤–µ–¥–∏—Ç–µ *—Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–Ω.*",
            parse_mode=ParseMode.MARKDOWN)
        await Login.login.set()


@dp.message_handler()
async def getting_password(msg: types.Message):
    await msg.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å ‚òπÔ∏è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start')


@dp.message_handler(state=Login.login)
async def getting_password(msg: types.Message, state: FSMContext):
    login = msg.text
    async with state.proxy() as data:
        data['user_login'] = login
    await bot.send_message(msg.chat.id, '–û—Ç–ª–∏—á–Ω–æ üòâ, –æ—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å')
    await Login.passw.set()


@dp.message_handler(state=Login.passw)
async def getting_password(msg: types.Message, state: FSMContext):
    password = msg.text
    data = await state.get_data()
    login = data.get('user_login')
    await state.finish()
    da = await bot.send_message(chat_id=msg.chat.id,
                                text='–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...')
    a = check_user(login, password)
    if a:
        await bot.send_message(msg.chat.id,
                               '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –±–æ—Ç –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∞–≥–∏, –Ω–æ –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏ –º—ã —Å–º–æ–∂–µ–º –∏—Ö —É—Å—Ç—Ä–∞–Ω–∏—Ç—å! –ï—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –∫–∞–∫—É—é-–ª–∏–±–æ –æ—à–∏–±–∫—É, '
                               '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. –£–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üòâ')
        session = create_session()
        new = Users()
        new.password = password
        new.login = login
        new.tg_id = msg.chat.id
        new.name = MyParser.get_name(login, password)
        new.cookie = a
        session.add(new)
        session.commit()
        await bot.edit_message_text(text=f"–ü—Ä–∏–≤–µ—Ç, {new.name}!", message_id=da.message_id, chat_id=msg.chat.id,
                                    reply_markup=main_menu)
    else:
        await bot.edit_message_text(chat_id=msg.chat.id, message_id=da.message_id,
                                    text='–í–∏–¥–∏–º–æ –≤—ã –≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üòî\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


if __name__ == '__main__':
    global_init("db.sqlite")
    start_polling(dp)
